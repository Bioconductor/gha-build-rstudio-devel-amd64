+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''raer'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://packagemanager.posit.co/cran/__linux__/jammy/latest
Bioconductor version 3.18 (BiocManager 1.30.22), R 4.3.2 (2023-10-31)
Installing package(s) 'raer'
also installing the dependencies ‘shape’, ‘iterators’, ‘RcppHNSW’, ‘ScaledMatrix’, ‘irlba’, ‘rsvd’, ‘beeswarm’, ‘vipor’, ‘FNN’, ‘RcppAnnoy’, ‘RcppProgress’, ‘Cairo’, ‘cpp11’, ‘sparseMatrixStats’, ‘sitmo’, ‘circlize’, ‘GetoptLong’, ‘clue’, ‘GlobalOptions’, ‘foreach’, ‘doParallel’, ‘beachmat’, ‘BiocNeighbors’, ‘BiocSingular’, ‘ggbeeswarm’, ‘RcppML’, ‘uwot’, ‘pheatmap’, ‘ggrepel’, ‘ggrastr’, ‘igraph’, ‘DelayedMatrixStats’, ‘bluster’, ‘metapod’, ‘dqrng’, ‘rex’, ‘ComplexHeatmap’, ‘TxDb.Hsapiens.UCSC.hg38.knownGene’, ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’, ‘scater’, ‘scran’, ‘scuttle’, ‘covr’, ‘raerdata’

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/shape_1.4.6.tar.gz'
Content type 'binary/octet-stream' length 784187 bytes (765 KB)
==================================================
downloaded 765 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/iterators_1.0.14.tar.gz'
Content type 'binary/octet-stream' length 345411 bytes (337 KB)
==================================================
downloaded 337 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RcppHNSW_0.5.0.tar.gz'
Content type 'binary/octet-stream' length 204244 bytes (199 KB)
==================================================
downloaded 199 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/ScaledMatrix_1.10.0.tar.gz'
Content type 'application/x-gzip' length 313034 bytes (305 KB)
==================================================
downloaded 305 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/irlba_2.3.5.1.tar.gz'
Content type 'binary/octet-stream' length 290315 bytes (283 KB)
==================================================
downloaded 283 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/rsvd_1.0.5.tar.gz'
Content type 'binary/octet-stream' length 3582950 bytes (3.4 MB)
==================================================
downloaded 3.4 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/beeswarm_0.4.0.tar.gz'
Content type 'binary/octet-stream' length 77211 bytes (75 KB)
==================================================
downloaded 75 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/vipor_0.4.7.tar.gz'
Content type 'binary/octet-stream' length 4583320 bytes (4.4 MB)
==================================================
downloaded 4.4 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/FNN_1.1.3.2.tar.gz'
Content type 'binary/octet-stream' length 125792 bytes (122 KB)
==================================================
downloaded 122 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RcppAnnoy_0.0.21.tar.gz'
Content type 'binary/octet-stream' length 264248 bytes (258 KB)
==================================================
downloaded 258 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RcppProgress_0.4.2.tar.gz'
Content type 'binary/octet-stream' length 19762 bytes (19 KB)
==================================================
downloaded 19 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/Cairo_1.6-2.tar.gz'
Content type 'binary/octet-stream' length 82593 bytes (80 KB)
==================================================
downloaded 80 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/cpp11_0.4.7.tar.gz'
Content type 'binary/octet-stream' length 280277 bytes (273 KB)
==================================================
downloaded 273 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/sparseMatrixStats_1.14.0.tar.gz'
Content type 'application/x-gzip' length 703089 bytes (686 KB)
==================================================
downloaded 686 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/sitmo_2.0.2.tar.gz'
Content type 'binary/octet-stream' length 169389 bytes (165 KB)
==================================================
downloaded 165 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/circlize_0.4.15.tar.gz'
Content type 'binary/octet-stream' length 3305679 bytes (3.2 MB)
==================================================
downloaded 3.2 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/GetoptLong_1.0.5.tar.gz'
Content type 'binary/octet-stream' length 1074527 bytes (1.0 MB)
==================================================
downloaded 1.0 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/clue_0.3-65.tar.gz'
Content type 'binary/octet-stream' length 991621 bytes (968 KB)
==================================================
downloaded 968 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/GlobalOptions_0.1.2.tar.gz'
Content type 'binary/octet-stream' length 469679 bytes (458 KB)
==================================================
downloaded 458 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/foreach_1.5.2.tar.gz'
Content type 'binary/octet-stream' length 138028 bytes (134 KB)
==================================================
downloaded 134 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/doParallel_1.0.17.tar.gz'
Content type 'binary/octet-stream' length 187672 bytes (183 KB)
==================================================
downloaded 183 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/beachmat_2.18.0.tar.gz'
Content type 'application/x-gzip' length 511950 bytes (499 KB)
==================================================
downloaded 499 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/BiocNeighbors_1.20.1.tar.gz'
Content type 'application/x-gzip' length 1039653 bytes (1015 KB)
==================================================
downloaded 1015 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/BiocSingular_1.18.0.tar.gz'
Content type 'application/x-gzip' length 616448 bytes (602 KB)
==================================================
downloaded 602 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/ggbeeswarm_0.7.2.tar.gz'
Content type 'binary/octet-stream' length 1754648 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/RcppML_0.3.7.tar.gz'
Content type 'binary/octet-stream' length 195176 bytes (190 KB)
==================================================
downloaded 190 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/uwot_0.1.16.tar.gz'
Content type 'binary/octet-stream' length 682779 bytes (666 KB)
==================================================
downloaded 666 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/pheatmap_1.0.12.tar.gz'
Content type 'binary/octet-stream' length 76685 bytes (74 KB)
==================================================
downloaded 74 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/ggrepel_0.9.4.tar.gz'
Content type 'binary/octet-stream' length 270949 bytes (264 KB)
==================================================
downloaded 264 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/ggrastr_1.0.2.tar.gz'
Content type 'binary/octet-stream' length 2672611 bytes (2.5 MB)
==================================================
downloaded 2.5 MB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/igraph_1.6.0.tar.gz'
Content type 'binary/octet-stream' length 4842579 bytes (4.6 MB)
==================================================
downloaded 4.6 MB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/DelayedMatrixStats_1.24.0.tar.gz'
Content type 'application/x-gzip' length 271120 bytes (264 KB)
==================================================
downloaded 264 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/bluster_1.12.0.tar.gz'
Content type 'application/x-gzip' length 2995786 bytes (2.9 MB)
==================================================
downloaded 2.9 MB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/metapod_1.10.1.tar.gz'
Content type 'application/x-gzip' length 331432 bytes (323 KB)
==================================================
downloaded 323 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/dqrng_0.3.2.tar.gz'
Content type 'binary/octet-stream' length 166302 bytes (162 KB)
==================================================
downloaded 162 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/rex_1.2.1.tar.gz'
Content type 'binary/octet-stream' length 124178 bytes (121 KB)
==================================================
downloaded 121 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/ComplexHeatmap_2.18.0.tar.gz'
Content type 'application/x-gzip' length 1455170 bytes (1.4 MB)
==================================================
downloaded 1.4 MB

trying URL 'https://bioconductor.org/packages/3.18/data/annotation/src/contrib/TxDb.Hsapiens.UCSC.hg38.knownGene_3.18.0.tar.gz'
Content type 'application/x-gzip' length 47184613 bytes (45.0 MB)
==================================================
downloaded 45.0 MB

trying URL 'https://bioconductor.org/packages/3.18/data/annotation/src/contrib/SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20.tar.gz'
Content type 'application/x-gzip' length 898581361 bytes (857.0 MB)
==================================================
downloaded 857.0 MB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/scater_1.30.1.tar.gz'
Content type 'application/x-gzip' length 4123647 bytes (3.9 MB)
==================================================
downloaded 3.9 MB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/scran_1.30.0.tar.gz'
Content type 'application/x-gzip' length 1802327 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/scuttle_1.12.0.tar.gz'
Content type 'application/x-gzip' length 1029515 bytes (1005 KB)
==================================================
downloaded 1005 KB

trying URL 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/src/contrib/covr_3.6.4.tar.gz'
Content type 'binary/octet-stream' length 325424 bytes (317 KB)
==================================================
downloaded 317 KB

trying URL 'https://bioconductor.org/packages/3.18/data/experiment/src/contrib/raerdata_1.0.0.tar.gz'
Content type 'application/x-gzip' length 251751 bytes (245 KB)
==================================================
downloaded 245 KB

trying URL 'https://bioconductor.org/packages/3.18/bioc/src/contrib/raer_1.0.0.tar.gz'
Content type 'application/x-gzip' length 1886658 bytes (1.8 MB)
==================================================
downloaded 1.8 MB

* installing *binary* package ‘shape’ ...
* ‘shape’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘shape’ as ‘shape_1.4.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shape)
* installing *binary* package ‘iterators’ ...
* ‘iterators’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘iterators’ as ‘iterators_1.0.14_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (iterators)
* installing *binary* package ‘RcppHNSW’ ...
* ‘RcppHNSW’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppHNSW’ as ‘RcppHNSW_0.5.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppHNSW)
* installing *source* package ‘ScaledMatrix’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ScaledMatrix’ as ‘ScaledMatrix_1.10.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ScaledMatrix)
* installing *binary* package ‘irlba’ ...
* ‘irlba’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘irlba’ as ‘irlba_2.3.5.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (irlba)
* installing *binary* package ‘rsvd’ ...
* ‘rsvd’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rsvd’ as ‘rsvd_1.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rsvd)
* installing *binary* package ‘beeswarm’ ...
* ‘beeswarm’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘beeswarm’ as ‘beeswarm_0.4.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (beeswarm)
* installing *binary* package ‘vipor’ ...
* ‘vipor’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘vipor’ as ‘vipor_0.4.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (vipor)
* installing *binary* package ‘FNN’ ...
* ‘FNN’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘FNN’ as ‘FNN_1.1.3.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (FNN)
* installing *binary* package ‘RcppAnnoy’ ...
* ‘RcppAnnoy’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppAnnoy’ as ‘RcppAnnoy_0.0.21_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppAnnoy)
* installing *binary* package ‘RcppProgress’ ...
* ‘RcppProgress’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppProgress’ as ‘RcppProgress_0.4.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppProgress)
* installing *binary* package ‘Cairo’ ...
* ‘Cairo’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘Cairo’ as ‘Cairo_1.6-2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Cairo)
* installing *binary* package ‘cpp11’ ...
* ‘cpp11’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘cpp11’ as ‘cpp11_0.4.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cpp11)
* installing *source* package ‘sparseMatrixStats’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c SparseMatrixView.cpp -o SparseMatrixView.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c methods.cpp -o methods.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c row_methods.cpp -o row_methods.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o sparseMatrixStats.so RcppExports.o SparseMatrixView.o methods.o row_methods.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-sparseMatrixStats/00new/sparseMatrixStats/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘sparseMatrixStats’ as ‘sparseMatrixStats_1.14.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sparseMatrixStats)
* installing *binary* package ‘sitmo’ ...
* ‘sitmo’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘sitmo’ as ‘sitmo_2.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sitmo)
* installing *binary* package ‘clue’ ...
* ‘clue’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘clue’ as ‘clue_0.3-65_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (clue)
* installing *binary* package ‘GlobalOptions’ ...
* ‘GlobalOptions’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘GlobalOptions’ as ‘GlobalOptions_0.1.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GlobalOptions)
* installing *source* package ‘beachmat’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c delayed_isometric_binary.cpp -o delayed_isometric_binary.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c delayed_isometric_math.cpp -o delayed_isometric_math.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c delayed_isometric_unary.cpp -o delayed_isometric_unary.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c delayed_other.cpp -o delayed_other.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c dense_matrix.cpp -o dense_matrix.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fragment_sparse_rows.cpp -o fragment_sparse_rows.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sparse_matrix.cpp -o sparse_matrix.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c tatami_utils.cpp -o tatami_utils.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c unknown_matrix.cpp -o unknown_matrix.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o beachmat.so RcppExports.o delayed_isometric_binary.o delayed_isometric_math.o delayed_isometric_unary.o delayed_other.o dense_matrix.o fragment_sparse_rows.o sparse_matrix.o tatami_utils.o unknown_matrix.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-beachmat/00new/beachmat/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘beachmat’ as ‘beachmat_2.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (beachmat)
* installing *binary* package ‘RcppML’ ...
* ‘RcppML’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppML’ as ‘RcppML_0.3.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppML)
* installing *binary* package ‘pheatmap’ ...
* ‘pheatmap’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘pheatmap’ as ‘pheatmap_1.0.12_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (pheatmap)
* installing *binary* package ‘ggrepel’ ...
* ‘ggrepel’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggrepel’ as ‘ggrepel_0.9.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggrepel)
* installing *source* package ‘metapod’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c combine_group.cpp -o combine_group.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c combine_parallel.cpp -o combine_parallel.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c count_direction.cpp -o count_direction.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c summarize_direction.cpp -o summarize_direction.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o metapod.so RcppExports.o combine_group.o combine_parallel.o count_direction.o summarize_direction.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-metapod/00new/metapod/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘metapod’ as ‘metapod_1.10.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (metapod)
* installing *binary* package ‘rex’ ...
* ‘rex’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rex’ as ‘rex_1.2.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rex)
* installing *source* package ‘TxDb.Hsapiens.UCSC.hg38.knownGene’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘TxDb.Hsapiens.UCSC.hg38.knownGene’ as ‘TxDb.Hsapiens.UCSC.hg38.knownGene_3.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (TxDb.Hsapiens.UCSC.hg38.knownGene)
* installing *source* package ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
Warning: replacing previous import ‘utils::findMatches’ by ‘S4Vectors::findMatches’ when loading ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
Warning: replacing previous import ‘utils::findMatches’ by ‘S4Vectors::findMatches’ when loading ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’
** testing if installed package can be loaded from final location
Warning: replacing previous import ‘utils::findMatches’ by ‘S4Vectors::findMatches’ when loading ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’ as ‘SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SNPlocs.Hsapiens.dbSNP144.GRCh38)
* installing *source* package ‘raerdata’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘raerdata’ as ‘raerdata_1.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (raerdata)
* installing *source* package ‘raer’ ...
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c plp.c -o plp.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c plp_data.c -o plp_data.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c plp_utils.c -o plp_utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c regfile.c -o regfile.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sc-plp.c -o sc-plp.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c utils.c -o utils.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext/bcftools/bcftools-ext.c -o ext/bcftools/bcftools-ext.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext/htsbox/htsbox-ext.c -o ext/htsbox/htsbox-ext.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG -D_FILE_OFFSET_BITS=64 -I'/tmp/tmp/built/Rhtslib/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ext/samtools/samtools-ext.c -o ext/samtools/samtools-ext.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o raer.so init.o plp.o plp_data.o plp_utils.o regfile.o sc-plp.o utils.o ext/bcftools/bcftools-ext.o ext/htsbox/htsbox-ext.o ext/samtools/samtools-ext.o /tmp/tmp/built/Rhtslib/usrlib/libhts.a -lcurl -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-raer/00new/raer/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘raer’ as ‘raer_1.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (raer)
* installing *binary* package ‘circlize’ ...
* ‘circlize’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘circlize’ as ‘circlize_0.4.15_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (circlize)
* installing *binary* package ‘GetoptLong’ ...
* ‘GetoptLong’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘GetoptLong’ as ‘GetoptLong_1.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GetoptLong)
* installing *binary* package ‘foreach’ ...
* ‘foreach’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘foreach’ as ‘foreach_1.5.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (foreach)
* installing *source* package ‘BiocNeighbors’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c annoy.cpp -o annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c build_annoy.cpp -o build_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c build_hnsw.cpp -o build_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c build_vptree.cpp -o build_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c distances.cpp -o distances.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c exhaustive.cpp -o exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_annoy.cpp -o find_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_exhaustive.cpp -o find_exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_hnsw.cpp -o find_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_kmknn.cpp -o find_kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_mutual_nns.cpp -o find_mutual_nns.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c find_vptree.cpp -o find_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c hnsw.cpp -o hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c kmknn.cpp -o kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c query_annoy.cpp -o query_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c query_exhaustive.cpp -o query_exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c query_hnsw.cpp -o query_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c query_kmknn.cpp -o query_kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c query_vptree.cpp -o query_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c utils.cpp -o utils.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c vptree.cpp -o vptree.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o BiocNeighbors.so RcppExports.o annoy.o build_annoy.o build_hnsw.o build_vptree.o distances.o exhaustive.o find_annoy.o find_exhaustive.o find_hnsw.o find_kmknn.o find_mutual_nns.o find_vptree.o hnsw.o kmknn.o query_annoy.o query_exhaustive.o query_hnsw.o query_kmknn.o query_vptree.o utils.o vptree.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-BiocNeighbors/00new/BiocNeighbors/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocNeighbors’ as ‘BiocNeighbors_1.20.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocNeighbors)
* installing *source* package ‘BiocSingular’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_scale.cpp -o compute_scale.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o BiocSingular.so RcppExports.o compute_scale.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-BiocSingular/00new/BiocSingular/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocSingular’ as ‘BiocSingular_1.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocSingular)
* installing *binary* package ‘ggbeeswarm’ ...
* ‘ggbeeswarm’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggbeeswarm’ as ‘ggbeeswarm_0.7.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggbeeswarm)
* installing *binary* package ‘igraph’ ...
* ‘igraph’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘igraph’ as ‘igraph_1.6.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (igraph)
* installing *source* package ‘DelayedMatrixStats’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘DelayedMatrixStats’ as ‘DelayedMatrixStats_1.24.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (DelayedMatrixStats)
* installing *binary* package ‘dqrng’ ...
* ‘dqrng’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘dqrng’ as ‘dqrng_0.3.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (dqrng)
* installing *binary* package ‘covr’ ...
* ‘covr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘covr’ as ‘covr_3.6.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (covr)
* installing *binary* package ‘doParallel’ ...
* ‘doParallel’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘doParallel’ as ‘doParallel_1.0.17_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (doParallel)
* installing *binary* package ‘uwot’ ...
* ‘uwot’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘uwot’ as ‘uwot_0.1.16_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (uwot)
* installing *binary* package ‘ggrastr’ ...
* ‘ggrastr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggrastr’ as ‘ggrastr_1.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggrastr)
* installing *source* package ‘bluster’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c build_snn.cpp -o build_snn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sum_neighbor_weights.cpp -o sum_neighbor_weights.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o bluster.so RcppExports.o build_snn.o sum_neighbor_weights.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-bluster/00new/bluster/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bluster’ as ‘bluster_1.12.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bluster)
* installing *source* package ‘scuttle’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cumulative_prop.cpp -o cumulative_prop.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c downsample_counts.cpp -o downsample_counts.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c fit_linear_model.cpp -o fit_linear_model.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c pool_size_factors.cpp -o pool_size_factors.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sparse_summarize.cpp -o sparse_summarize.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sum_counts.cpp -o sum_counts.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c utils.cpp -o utils.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o scuttle.so RcppExports.o cumulative_prop.o downsample_counts.o fit_linear_model.o pool_size_factors.o sparse_summarize.o sum_counts.o utils.o -llapack -lblas -lgfortran -lm -lquadmath -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-scuttle/00new/scuttle/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scuttle’ as ‘scuttle_1.12.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scuttle)
* installing *source* package ‘ComplexHeatmap’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ComplexHeatmap’ as ‘ComplexHeatmap_2.18.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ComplexHeatmap)
* installing *source* package ‘scater’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scater’ as ‘scater_1.30.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scater)
* installing *source* package ‘scran’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c choose_effect_size.cpp -o choose_effect_size.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c combine_rho.cpp -o combine_rho.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_blocked_stats.cpp -o compute_blocked_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_residual_stats.cpp -o compute_residual_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_rho_null.cpp -o compute_rho_null.o
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’:
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<int> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<int>]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cyclone_scores.cpp -o cyclone_scores.o
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’:
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<double> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<double>]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c overlap_exprs.cpp -o overlap_exprs.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rand_custom.cpp -o rand_custom.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o scran.so RcppExports.o choose_effect_size.o combine_rho.o compute_blocked_stats.o compute_residual_stats.o compute_rho_null.o cyclone_scores.o overlap_exprs.o rand_custom.o -llapack -lblas -lgfortran -lm -lquadmath -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-scran/00new/scran/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scran’ as ‘scran_1.30.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scran)

The downloaded source packages are in
	‘/tmp/RtmpqUz8tl/downloaded_packages’
Old packages: 'BiocVersion', 'brew', 'brio', 'bslib', 'cli', 'cpp11', 'curl',
  'desc', 'evaluate', 'fansi', 'gert', 'htmltools', 'htmlwidgets', 'httpuv',
  'httr2', 'jsonlite', 'knitr', 'later', 'lifecycle', 'littler', 'pkgbuild',
  'processx', 'ragg', 'rlang', 'rprojroot', 'sass', 'shiny', 'stringi',
  'stringr', 'testthat', 'tinytex', 'vctrs', 'waldo', 'withr', 'xfun', 'xml2',
  'yaml', 'cluster', 'foreign', 'Matrix', 'mgcv', 'nlme', 'rpart'

real	13m0.526s
user	11m57.884s
sys	0m58.609s
* installing *source* package ‘raerdata’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘raerdata’ as ‘raerdata_1.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (raerdata)
