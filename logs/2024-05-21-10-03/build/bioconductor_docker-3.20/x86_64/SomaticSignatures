+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''SomaticSignatures'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://p3m.dev/cran/__linux__/jammy/latest
Bioconductor version 3.20 (BiocManager 1.30.23), R 4.4.0 (2024-04-24)
Installing package(s) 'SomaticSignatures'
also installing the dependencies ‘registry’, ‘rngtools’, ‘gridBase’, ‘NMF’, ‘proxy’, ‘BSgenome.Hsapiens.1000genomes.hs37d5’, ‘SomaticCancerAlterations’, ‘ggdendro’, ‘fastICA’, ‘sva’

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/registry_0.5-1.tar.gz'
Content type 'binary/octet-stream' length 194528 bytes (189 KB)
==================================================
downloaded 189 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/rngtools_1.5.2.tar.gz'
Content type 'binary/octet-stream' length 78011 bytes (76 KB)
==================================================
downloaded 76 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/gridBase_0.4-7.tar.gz'
Content type 'binary/octet-stream' length 162064 bytes (158 KB)
==================================================
downloaded 158 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/NMF_0.27.tar.gz'
Content type 'application/x-tar' length 1679430 bytes (1.6 MB)
==================================================
downloaded 1.6 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/proxy_0.4-27.tar.gz'
Content type 'binary/octet-stream' length 175590 bytes (171 KB)
==================================================
downloaded 171 KB

trying URL 'https://bioconductor.org/packages/3.20/data/annotation/src/contrib/BSgenome.Hsapiens.1000genomes.hs37d5_0.99.1.tar.gz'
Content type 'application/x-gzip' length 687514862 bytes (655.7 MB)
==================================================
downloaded 655.7 MB

trying URL 'https://bioconductor.org/packages/3.20/data/experiment/src/contrib/SomaticCancerAlterations_1.41.0.tar.gz'
Content type 'application/x-gzip' length 4658021 bytes (4.4 MB)
==================================================
downloaded 4.4 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggdendro_0.2.0.tar.gz'
Content type 'binary/octet-stream' length 216678 bytes (211 KB)
==================================================
downloaded 211 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/fastICA_1.2-4.tar.gz'
Content type 'binary/octet-stream' length 41531 bytes (40 KB)
==================================================
downloaded 40 KB

trying URL 'https://bioconductor.org/packages/3.20/bioc/src/contrib/sva_3.53.0.tar.gz'
Content type 'application/x-gzip' length 453035 bytes (442 KB)
==================================================
downloaded 442 KB

trying URL 'https://bioconductor.org/packages/3.20/bioc/src/contrib/SomaticSignatures_2.41.0.tar.gz'
Content type 'application/x-gzip' length 1949336 bytes (1.9 MB)
==================================================
downloaded 1.9 MB

* installing *binary* package ‘registry’ ...
* ‘registry’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘registry’ as ‘registry_0.5-1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (registry)
* installing *binary* package ‘rngtools’ ...
* ‘rngtools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rngtools’ as ‘rngtools_1.5.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rngtools)
* installing *binary* package ‘gridBase’ ...
* ‘gridBase’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘gridBase’ as ‘gridBase_0.4-7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gridBase)
* installing *binary* package ‘proxy’ ...
* ‘proxy’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘proxy’ as ‘proxy_0.4-27_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (proxy)
* installing *source* package ‘BSgenome.Hsapiens.1000genomes.hs37d5’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BSgenome.Hsapiens.1000genomes.hs37d5’ as ‘BSgenome.Hsapiens.1000genomes.hs37d5_0.99.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BSgenome.Hsapiens.1000genomes.hs37d5)
* installing *source* package ‘SomaticCancerAlterations’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SomaticCancerAlterations’ as ‘SomaticCancerAlterations_1.41.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SomaticCancerAlterations)
* installing *binary* package ‘ggdendro’ ...
* ‘ggdendro’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggdendro’ as ‘ggdendro_0.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggdendro)
* installing *binary* package ‘fastICA’ ...
* ‘fastICA’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘fastICA’ as ‘fastICA_1.2-4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fastICA)
* installing *source* package ‘sva’ ...
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sva.c -o sva.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o sva.so sva.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-sva/00new/sva/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘sva’ as ‘sva_3.53.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sva)
* installing *source* package ‘NMF’ ...
** package ‘NMF’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c distance.cpp -o distance.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c divergence.cpp -o divergence.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c euclidean.cpp -o euclidean.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c registerDynamicSymbol.c -o registerDynamicSymbol.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c utils.cpp -o utils.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o NMF.so distance.o divergence.o euclidean.o registerDynamicSymbol.o utils.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-NMF/00new/NMF/libs
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
Setting package specific options: package:NMF:logger (1 default option(s))
Setting package specific options: package:NMF (10 default option(s))
Creating a generic function for ‘plot’ from ‘graphics’ in package ‘NMF’
    (from the saved implicit definition)
Creating meta registry in package 'NMF' ... OK
Creating registry 'extra_handler' in package 'NMF' ... OK
Creating registry 'extra_action' in package 'NMF' ... OK
Registering extra handler 'install.packages' [function] ... OK
Creating registry 'algorithm' in package 'NMF' ... OK
Registering NMF algorithm '.R#brunet' [NMFStrategyIterative] ... OK
Registering NMF algorithm 'brunet' [NMFStrategyIterative] based on template '.R#brunet' ... OK
Registering NMF algorithm 'KL' [NMFStrategyIterative] ... OK
Registering NMF algorithm '.R#lee' [NMFStrategyIterative] ... OK
Registering NMF algorithm 'lee' [NMFStrategyIterative] based on template '.R#lee' ... OK
Registering NMF algorithm 'Frobenius' [NMFStrategyIterative] ... OK
Registering NMF algorithm '.R#offset' [NMFStrategyIterative] ... OK
Registering NMF algorithm 'offset' [NMFStrategyIterative] based on template '.R#offset' ... OK
Registering NMF algorithm '.R#nsNMF' [NMFStrategyIterative] ... OK
Registering NMF algorithm 'nsNMF' [NMFStrategyIterative] based on template '.R#nsNMF' ... OK
Registering NMF algorithm 'ls-nmf' [NMFStrategyIterative] ... OK
Registering NMF algorithm 'pe-nmf' [NMFStrategyIterative] ... OK
Registering NMF algorithm '.siNMF' [NMFStrategyIterative] based on template 'lee' ... OK
Registering NMF algorithm 'siNMF' [NMFStrategyIterative] based on template 'lee' ... OK
Registering NMF algorithm 'snmf/r' [NMFStrategyFunction] ... OK
Registering NMF algorithm 'snmf/l' [NMFStrategyFunction] ... OK
Registering extra action 'bigmemory' for handler 'install.packages' ... OK
Registering extra action 'synchronicity' for handler 'install.packages' ... OK
Creating registry 'seed' in package 'NMF' ... OK
Registering NMF seeding method 'none' [NMFSeed] ... OK
Registering NMF seeding method 'random' [NMFSeed] ... OK
Registering NMF seeding method 'ica' [NMFSeed] ... OK
Registering NMF seeding method 'nndsvd' [NMFSeed] ... OK
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘NMF’ as ‘NMF_0.27_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (NMF)
* installing *source* package ‘SomaticSignatures’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SomaticSignatures’ as ‘SomaticSignatures_2.41.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SomaticSignatures)

The downloaded source packages are in
	‘/tmp/Rtmp7dlRL2/downloaded_packages’
Old packages: 'rmarkdown', 'KernSmooth'

real	2m54.058s
user	2m28.766s
sys	0m14.346s
* installing *source* package ‘SomaticCancerAlterations’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SomaticCancerAlterations’ as ‘SomaticCancerAlterations_1.41.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SomaticCancerAlterations)
