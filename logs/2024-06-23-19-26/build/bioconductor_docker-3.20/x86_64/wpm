+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''wpm'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://p3m.dev/cran/__linux__/jammy/2024-06-13
Bioconductor version 3.20 (BiocManager 1.30.23), R 4.4.0 (2024-04-24)
Installing package(s) 'wpm'
also installing the dependencies ‘attempt’, ‘here’, ‘anytime’, ‘config’, ‘golem’, ‘DT’, ‘shinydashboard’, ‘shinyWidgets’, ‘shinycustomloader’, ‘logging’

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/attempt_0.3.1.tar.gz'
Content type 'binary/octet-stream' length 107626 bytes (105 KB)
==================================================
downloaded 105 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/here_1.0.1.tar.gz'
Content type 'binary/octet-stream' length 53480 bytes (52 KB)
==================================================
downloaded 52 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/anytime_0.3.9.tar.gz'
Content type 'binary/octet-stream' length 406781 bytes (397 KB)
==================================================
downloaded 397 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/config_0.3.2.tar.gz'
Content type 'binary/octet-stream' length 102935 bytes (100 KB)
==================================================
downloaded 100 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/golem_0.4.1.tar.gz'
Content type 'binary/octet-stream' length 1145035 bytes (1.1 MB)
==================================================
downloaded 1.1 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/DT_0.33.tar.gz'
Content type 'binary/octet-stream' length 1792625 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/shinydashboard_0.7.2.tar.gz'
Content type 'binary/octet-stream' length 325184 bytes (317 KB)
==================================================
downloaded 317 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/shinyWidgets_0.8.6.tar.gz'
Content type 'binary/octet-stream' length 1291118 bytes (1.2 MB)
==================================================
downloaded 1.2 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/shinycustomloader_0.9.0.tar.gz'
Content type 'binary/octet-stream' length 30243 bytes (29 KB)
==================================================
downloaded 29 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/2024-06-13/src/contrib/logging_0.10-108.tar.gz'
Content type 'binary/octet-stream' length 166875 bytes (162 KB)
==================================================
downloaded 162 KB

trying URL 'https://bioconductor.org/packages/3.20/bioc/src/contrib/wpm_1.15.0.tar.gz'
Content type 'application/x-gzip' length 2520022 bytes (2.4 MB)
==================================================
downloaded 2.4 MB

* installing *binary* package ‘attempt’ ...
* ‘attempt’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘attempt’ as ‘attempt_0.3.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (attempt)
* installing *binary* package ‘here’ ...
* ‘here’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘here’ as ‘here_1.0.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (here)
* installing *binary* package ‘anytime’ ...
* ‘anytime’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘anytime’ as ‘anytime_0.3.9_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (anytime)
* installing *binary* package ‘config’ ...
* ‘config’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘config’ as ‘config_0.3.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (config)
* installing *binary* package ‘DT’ ...
* ‘DT’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘DT’ as ‘DT_0.33_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (DT)
* installing *binary* package ‘shinydashboard’ ...
* ‘shinydashboard’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘shinydashboard’ as ‘shinydashboard_0.7.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shinydashboard)
* installing *binary* package ‘shinycustomloader’ ...
* ‘shinycustomloader’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘shinycustomloader’ as ‘shinycustomloader_0.9.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shinycustomloader)
* installing *binary* package ‘logging’ ...
* ‘logging’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘logging’ as ‘logging_0.10-108_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (logging)
* installing *binary* package ‘golem’ ...
* ‘golem’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘golem’ as ‘golem_0.4.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (golem)
* installing *binary* package ‘shinyWidgets’ ...
* ‘shinyWidgets’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘shinyWidgets’ as ‘shinyWidgets_0.8.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shinyWidgets)
* installing *source* package ‘wpm’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location

── This is the Well-Plate Maker package. ───────────────────────────────────────
If you want to use the shiny application, then simply run: `wpm()`.If you want
to see the Tutorial vignette and use WPM in command line, run:
`browseVignettes('wpm')`.
** testing if installed package can be loaded from final location

── This is the Well-Plate Maker package. ───────────────────────────────────────
If you want to use the shiny application, then simply run: `wpm()`.If you want
to see the Tutorial vignette and use WPM in command line, run:
`browseVignettes('wpm')`.
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘wpm’ as ‘wpm_1.15.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (wpm)

The downloaded source packages are in
	‘/tmp/RtmpB9WYNT/downloaded_packages’

real	0m17.461s
user	0m7.504s
sys	0m3.047s
